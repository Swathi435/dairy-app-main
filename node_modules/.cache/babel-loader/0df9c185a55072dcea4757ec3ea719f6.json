{"ast":null,"code":"// import { createSlice } from \"@reduxjs/toolkit\";\n// import Company from \"../Components/models/Company\";\nimport { createSlice } from \"@reduxjs/toolkit\"; // step 3 for redux - create slices for each components \n\nconst CompSlice = createSlice({\n  name: 'company',\n  initialState: {\n    companyState: new Company(),\n    companyList: []\n  },\n  reducers: {\n    getcompanyById: (state, action) => {\n      console.log('company slice reducer');\n      state.companyState = action.payload;\n    },\n    getAllCompany: (state, action) => {\n      console.log('CompSlice reducers getAllcompany');\n      state.companyList = action.payload;\n    },\n    deletecompanyById: (state, action) => {\n      console.log('CompSlice reducers deleteCompanyById');\n      state.companyList = action.payload;\n    },\n    updatecompany: (state, action) => {\n      console.log('CompSlice reducers update CompanyById');\n      state.companyList = action.payload;\n    },\n    insertcompany: (state, action) => {\n      console.log('CompSlice reducers addCompanyById');\n      state.companyList = action.payload;\n    } // more methods will be added \n\n  }\n});\nexport const {\n  getcompanyById,\n  getAllCompany,\n  deletecompanyById,\n  updatecompany,\n  insertcompany\n} = CompSlice.actions;\nexport default CompSlice.reducer;","map":{"version":3,"sources":["C:/frontend/cg_ui_12Oct_B3/dairy-app-main/src/redux/CompSlice.js"],"names":["createSlice","CompSlice","name","initialState","companyState","Company","companyList","reducers","getcompanyById","state","action","console","log","payload","getAllCompany","deletecompanyById","updatecompany","insertcompany","actions","reducer"],"mappings":"AAAA;AACA;AACA,SAASA,WAAT,QAA4B,kBAA5B,C,CACA;;AACA,MAAMC,SAAS,GAAGD,WAAW,CAAC;AAE1BE,EAAAA,IAAI,EAAE,SAFoB;AAI1BC,EAAAA,YAAY,EAAE;AAGVC,IAAAA,YAAY,EAAE,IAAIC,OAAJ,EAHJ;AAIVC,IAAAA,WAAW,EAAE;AAJH,GAJY;AAa1BC,EAAAA,QAAQ,EAAE;AAENC,IAAAA,cAAc,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC/BC,MAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACAH,MAAAA,KAAK,CAACL,YAAN,GAAqBM,MAAM,CAACG,OAA5B;AACH,KALK;AAONC,IAAAA,aAAa,EAAE,CAACL,KAAD,EAAQC,MAAR,KAAmB;AAC9BC,MAAAA,OAAO,CAACC,GAAR,CAAY,kCAAZ;AACAH,MAAAA,KAAK,CAACH,WAAN,GAAoBI,MAAM,CAACG,OAA3B;AACH,KAVK;AAWNE,IAAAA,iBAAiB,EAAE,CAACN,KAAD,EAAQC,MAAR,KAAmB;AAClCC,MAAAA,OAAO,CAACC,GAAR,CAAY,sCAAZ;AACAH,MAAAA,KAAK,CAACH,WAAN,GAAoBI,MAAM,CAACG,OAA3B;AACH,KAdK;AAeNG,IAAAA,aAAa,EAAE,CAACP,KAAD,EAAQC,MAAR,KAAmB;AAC9BC,MAAAA,OAAO,CAACC,GAAR,CAAY,uCAAZ;AACAH,MAAAA,KAAK,CAACH,WAAN,GAAoBI,MAAM,CAACG,OAA3B;AACH,KAlBK;AAmBNI,IAAAA,aAAa,EAAE,CAACR,KAAD,EAAQC,MAAR,KAAmB;AAC9BC,MAAAA,OAAO,CAACC,GAAR,CAAY,mCAAZ;AACAH,MAAAA,KAAK,CAACH,WAAN,GAAoBI,MAAM,CAACG,OAA3B;AACH,KAtBK,CAwBN;;AAxBM;AAbgB,CAAD,CAA7B;AAyCA,OAAO,MAAM;AAAEL,EAAAA,cAAF;AAAkBM,EAAAA,aAAlB;AAAkCC,EAAAA,iBAAlC;AAAoDC,EAAAA,aAApD;AAAmEC,EAAAA;AAAnE,IAAqFhB,SAAS,CAACiB,OAArG;AAEP,eAAejB,SAAS,CAACkB,OAAzB","sourcesContent":["// import { createSlice } from \"@reduxjs/toolkit\";\r\n// import Company from \"../Components/models/Company\";\r\nimport { createSlice } from \"@reduxjs/toolkit\";\r\n// step 3 for redux - create slices for each components \r\nconst CompSlice = createSlice({\r\n\r\n    name: 'company',\r\n\r\n    initialState: {\r\n         \r\n\r\n        companyState: new Company(),\r\n        companyList: []\r\n\r\n\r\n    },\r\n\r\n    reducers: {\r\n\r\n        getcompanyById: (state, action) => {\r\n            console.log('company slice reducer');\r\n            state.companyState = action.payload;\r\n        },\r\n\r\n        getAllCompany: (state, action) => {\r\n            console.log('CompSlice reducers getAllcompany');\r\n            state.companyList = action.payload;\r\n        },\r\n        deletecompanyById: (state, action) => {\r\n            console.log('CompSlice reducers deleteCompanyById');\r\n            state.companyList = action.payload;\r\n        },\r\n        updatecompany: (state, action) => {\r\n            console.log('CompSlice reducers update CompanyById');\r\n            state.companyList = action.payload;\r\n        },\r\n        insertcompany: (state, action) => {\r\n            console.log('CompSlice reducers addCompanyById');\r\n            state.companyList = action.payload;\r\n        },\r\n\r\n        // more methods will be added \r\n    }\r\n});\r\n\r\nexport const { getcompanyById, getAllCompany , deletecompanyById,updatecompany, insertcompany } = CompSlice.actions;\r\n\r\nexport default CompSlice.reducer;"]},"metadata":{},"sourceType":"module"}